//
//  WatherParis5Tests-WatherParis5Mocks.generated.swift
//  WatherParis5
//
//  Generated by Mockingbird v0.20.0.
//  DO NOT EDIT
//

@testable import Mockingbird
@testable import WatherParis5
import Alamofire
import CoreData
import Foundation
import Kingfisher
import RealmSwift
import Swift
import SwiftUI

private let mkbGenericStaticMockContext = Mockingbird.GenericStaticMockContext()

// MARK: - Mocked DatabaseManager
public final class DatabaseManagerMock: WatherParis5.DatabaseManager, Mockingbird.Mock {
  typealias MockingbirdSupertype = WatherParis5.DatabaseManager
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "WatherParis5"])

  // MARK: Mocked databaseClient
  override public var `databaseClient`: WatherParis5.DataBase {
    get {
      return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "databaseClient.getter", setterSelectorName: "databaseClient.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier((WatherParis5.DataBase).self))) {
        self.mockingbirdContext.recordInvocation($0)
        let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
        if let mkbImpl = mkbImpl as? () -> WatherParis5.DataBase { return mkbImpl() }
        if let mkbImpl = mkbImpl as? () -> Any { return Mockingbird.dynamicCast(mkbImpl()) as WatherParis5.DataBase }
        for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
          switch mkbTargetBox.target {
          case .super:
            return super.`databaseClient`
          case .object(let mkbObject):
            guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
            let mkbValue: WatherParis5.DataBase = mkbObject.`databaseClient`
            self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
            return mkbValue
          }
        }
        if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (WatherParis5.DataBase).self) { return mkbValue }
        self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
      }
    }
    set {
      return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "databaseClient.setter", setterSelectorName: "databaseClient.setter", selectorType: Mockingbird.SelectorType.setter, arguments: [Mockingbird.ArgumentMatcher(newValue)], returnType: Swift.ObjectIdentifier(Void.self))) {
        self.mockingbirdContext.recordInvocation($0)
        let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
        if let mkbImpl = mkbImpl as? (WatherParis5.DataBase) -> Void { return mkbImpl(newValue) }
        if let mkbImpl = mkbImpl as? () -> Void { return mkbImpl() }
        if let mkbImpl = mkbImpl as? (Any?) -> Any { return Mockingbird.dynamicCast(mkbImpl(newValue as Any?)) as Void }
        if let mkbImpl = mkbImpl as? () -> Any { return Mockingbird.dynamicCast(mkbImpl()) as Void }
        for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
          switch mkbTargetBox.target {
          case .super:
            return super.`databaseClient` = newValue
          case .object(let mkbObject):
            guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
            let mkbValue: Void = mkbObject.`databaseClient` = newValue
            self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
            return mkbValue
          }
        }
        if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Void).self) { return mkbValue }
        self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
      }
    }
  }

  public func getDatabaseClient() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> WatherParis5.DataBase, WatherParis5.DataBase> {
    return Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> WatherParis5.DataBase, WatherParis5.DataBase>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "databaseClient.getter", setterSelectorName: "databaseClient.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier((WatherParis5.DataBase).self)))
  }

  public func setDatabaseClient(_ newValue: @autoclosure () -> WatherParis5.DataBase) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (WatherParis5.DataBase) -> Void, Void> {
    return Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (WatherParis5.DataBase) -> Void, Void>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "databaseClient.setter", setterSelectorName: "databaseClient.setter", selectorType: Mockingbird.SelectorType.setter, arguments: [Mockingbird.resolve(newValue)], returnType: Swift.ObjectIdentifier(Void.self)))
  }

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    super.init()
    self.mockingbirdContext.sourceLocation = sourceLocation
    DatabaseManagerMock.mockingbirdContext.sourceLocation = sourceLocation
  }

  // MARK: Mocked `persistInDatabase`(`model`: WatherParis5.ResponseObject, `callback`: @escaping (Error?) -> Void)
  public override func `persistInDatabase`(`model`: WatherParis5.ResponseObject, `callback`: @escaping (Error?) -> Void) -> Void {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`persistInDatabase`(`model`: WatherParis5.ResponseObject, `callback`: @escaping (Error?) -> Void) -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`model`), Mockingbird.ArgumentMatcher(`callback`)], returnType: Swift.ObjectIdentifier((Void).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? (WatherParis5.ResponseObject, @escaping (Error?) -> Void) -> Void { return mkbImpl(`model`, `callback`) }
      if let mkbImpl = mkbImpl as? () -> Void { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          return super.`persistInDatabase`(model: `model`, callback: `callback`)
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: Void = mkbObject.`persistInDatabase`(model: `model`, callback: `callback`)
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Void).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `persistInDatabase`(`model`: @autoclosure () -> WatherParis5.ResponseObject, `callback`: @autoclosure () -> (Error?) -> Void) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (WatherParis5.ResponseObject, @escaping (Error?) -> Void) -> Void, Void> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (WatherParis5.ResponseObject, @escaping (Error?) -> Void) -> Void, Void>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`persistInDatabase`(`model`: WatherParis5.ResponseObject, `callback`: @escaping (Error?) -> Void) -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`model`), Mockingbird.resolve(`callback`)], returnType: Swift.ObjectIdentifier((Void).self)))
  }

  // MARK: Mocked `getData`()
  public override func `getData`() -> WatherParis5.ResponseObject? {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`getData`() -> WatherParis5.ResponseObject?", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((WatherParis5.ResponseObject?).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? () -> WatherParis5.ResponseObject? { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          return super.`getData`()
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: WatherParis5.ResponseObject? = mkbObject.`getData`()
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (WatherParis5.ResponseObject?).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `getData`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> WatherParis5.ResponseObject?, WatherParis5.ResponseObject?> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> WatherParis5.ResponseObject?, WatherParis5.ResponseObject?>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`getData`() -> WatherParis5.ResponseObject?", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((WatherParis5.ResponseObject?).self)))
  }
}

/// Returns a concrete mock of `DatabaseManager`.
public func mock(_ type: WatherParis5.DatabaseManager.Type, file: StaticString = #file, line: UInt = #line) -> DatabaseManagerMock {
  return DatabaseManagerMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked FetchWeatherAPI
public final class FetchWeatherAPIMock: WatherParis5.FetchWeatherAPI, Mockingbird.Mock {
  typealias MockingbirdSupertype = WatherParis5.FetchWeatherAPI
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "WatherParis5"])

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    super.init()
    self.mockingbirdContext.sourceLocation = sourceLocation
    FetchWeatherAPIMock.mockingbirdContext.sourceLocation = sourceLocation
  }

  // MARK: Mocked `fetchWeather`(`completion`: @escaping (Error?) -> Void)
  public override func `fetchWeather`(`completion`: @escaping (Error?) -> Void) -> Void {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`fetchWeather`(`completion`: @escaping (Error?) -> Void) -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`completion`)], returnType: Swift.ObjectIdentifier((Void).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? (@escaping (Error?) -> Void) -> Void { return mkbImpl(`completion`) }
      if let mkbImpl = mkbImpl as? () -> Void { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          return super.`fetchWeather`(completion: `completion`)
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: Void = mkbObject.`fetchWeather`(completion: `completion`)
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Void).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `fetchWeather`(`completion`: @autoclosure () -> (Error?) -> Void) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (@escaping (Error?) -> Void) -> Void, Void> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (@escaping (Error?) -> Void) -> Void, Void>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`fetchWeather`(`completion`: @escaping (Error?) -> Void) -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`completion`)], returnType: Swift.ObjectIdentifier((Void).self)))
  }
}

/// Returns a concrete mock of `FetchWeatherAPI`.
public func mock(_ type: WatherParis5.FetchWeatherAPI.Type, file: StaticString = #file, line: UInt = #line) -> FetchWeatherAPIMock {
  return FetchWeatherAPIMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}
